<div class="card">
    <div class="row g-0 card-body cardBookItem">
        <div class="col-md-2 text-center text-md-start">
            <img src="" class="img-fluid rounded" alt="Obalka knihy">
        </div>
        <div class="col-md-10">
            <div class="row justify-content-center justify-content-md-end me-md-1">
                <p class="ratingInfo">
                    Hodnotenie:
                </p>
            </div>
            <div class="row">
                <h5 class="card-title mb-2">
                    @Book?.Title
                </h5>
            </div>
            <div class="row">
                <p class="card-text authorName">
                    <small>
                        @AssembleAuthorsRow()
                    </small>
                </p>
            </div>
            <div class="row">
                <p class="card-text">
                    @(Book?.Description?.Length <= 200 ? Book!.Description : Book!.Description?.Substring(0, 200))
                </p>
            </div>
        </div>
    </div>
    <div class="row g-0 card-footer reservingArea">
        <div class="col-lg-6 d-flex mt-1 editSection">
            <!-- Zobraz, iba ak je pouzivatel autorizovany-->
            <a class="btn btn-danger me-3" @onclick="deleteBook">
                <i class="bi bi-trash"></i> Vymazať
            </a>
            <a class="btn btn-warning" href=@($"edit-book/{Book?.Id ?? 1}")>
                <i class="bi bi-pencil"></i> Upraviť
            </a>
            <!-- Koniec -->
        </div>
        <div class="col-lg-6 d-flex justify-content-center justify-content-lg-end mt-3 mt-lg-0">
            <h5> 
                <span class="badge mt-2 me-3 available-bg">
                   Dostupných: @Book.ReservedAmount
                </span>
             </h5>

            <button class="btn btn-primary" type="button">
                <input type="hidden" name="id" value="@Book.Id"/>
                Rezervovať
            </button>
        </div>
    </div>
</div>

@inject IHttpClientFactory _httpClientFactory
@code {
    [Parameter]
    public Book? Book { get; set; }

    public string? ErrorMessage { get; set; }
    //reservations
    //@($"add-reservation/{Book.Id}"

    public string AssembleAuthorsRow()
    {
        string authorsRow = "";
        if (Book is not null & Book!.Authors is not null & Book.Authors!.Count() > 0)
        {
            for (int i = 0; i < Book.Authors!.Count() - 1; i++)
            {
                string fullAuthorName = assembleFullAuthorName(Book.Authors!.ElementAt(i));
                authorsRow += $" {fullAuthorName} &";
            }
            authorsRow += " " + assembleFullAuthorName(Book.Authors!.ElementAt(Book.Authors!.Count() - 1));
            return authorsRow;
        }
        return "Neznámy autor";
    }

    private string assembleFullAuthorName(Author author)
    {
        string fullAuthorName = "";

        if (author.PrefixTitles is not null)
            fullAuthorName += $"{author.PrefixTitles} ";

        fullAuthorName += $"{author.FirstName} {author.LastName}";

        if (author.SuffixTitles is not null)
            fullAuthorName += $", {author.SuffixTitles}";

        return fullAuthorName;
    }

    private async Task deleteBook()
    {
        var httpClient = _httpClientFactory.CreateClient("LibraryResources");
        HttpRequestMessage request = new HttpRequestMessage
            {
                Content = JsonContent.Create(Book),
                Method = HttpMethod.Delete,
                RequestUri = new Uri($"api/book/{Book!.Id}", UriKind.Relative)
            };
        
        try
        {
            var response = await httpClient.SendAsync(request);
            ErrorMessage = null;
        }
        catch (Exception e)
        {
            ErrorMessage = "Chyba pri odstránení knihy. Detail chyby: " + e.Message;
        }
    }
}