<EditForm Model="@Author">
	<DataAnnotationsValidator/>

    <div class="form-group row" id=@($"author-wrapper-{AuthorIndex}")>
        <label for="FirstName-1" class="col-form-label col-sm-4 col-lg-3 col-xxl-2">@((AuthorIndex + 1).ToString()). autor</label>
        <button type="button" class="btn btn-outline-danger deleteButton" @onmouseover="ShowBorderedArea" @onmouseout="HideBorderedArea">
            <i class="bi bi-trash" id="<?= 'iTrash-' . $i ?>"></i>
        </button>

        <InputText @bind-Value="Author.PrefixTitles" class="form-control" placeholder="Tituly pred" />
        <ValidationMessage For="@(() => Author.PrefixTitles)" />

        <InputText @bind-Value="Author.FirstName" class="form-control" placeholder="Meno" />
        <ValidationMessage For="@(() => Author.FirstName)" />

        <InputText @bind-Value="Author.LastName" class="form-control" placeholder="Priezvisko" />
        <ValidationMessage For="@(() => Author.LastName)" />

        <InputText @bind-Value="Author.SuffixTitles" class="form-control" placeholder="Tituly za" />
        <ValidationMessage For="@(() => Author.SuffixTitles)" />

    </div>
</EditForm>

@inject IJSRuntime JS
@code {
    [Parameter]
    public int AuthorIndex { get; set; } = 0;

    [Parameter]
    public Author Author { get; set; } = new Author { FirstName = "", LastName = "" };

    [Parameter]
    public EventCallback<int> OnAuthorDeleted { get; set; }  // vrati index vymazaneho autora

    private async Task ShowBorderedArea() => await JS.InvokeVoidAsync("toggleBorderVisibility", true, AuthorIndex);

    private async Task HideBorderedArea() => await JS.InvokeVoidAsync("toggleBorderVisibility", false, AuthorIndex);
}